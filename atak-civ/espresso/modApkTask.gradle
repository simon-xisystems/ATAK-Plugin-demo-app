
def findAAPT() {
    def buildTools = new File(android.getSdkDirectory(), "build-tools")
    def version = new File(buildTools, android.buildToolsVersion)
    def aapt = fileTree(dir: version, include: 'aapt*', exclude: "aapt2*")
    return aapt.files[0]
}

def findAndroidJar() {
    def platforms = new File(android.getSdkDirectory(), "platforms")
    def version = new File(platforms, android.compileSdkVersion)
    return new File(version, "android.jar")
}

def getSkewSuffix(skew) {
    def origSkew = skew
    def skewSuffixMap = [
            mil : "",
            civ : ".civ",
            fvey : ".fvey",
            gbr : ".gbr",
            can : ".can",
            aus : ".aus",
            nzl : ".nzl",
            intl : ".intl",
            prt : ".prt"
    ]

    skew = skew.toLowerCase()

    if(skew.endsWith("debug"))
        skew = skew.substring(0, skew.length()-"debug".length())

    if(skew.length() == 0)
        return ""

    def ret = null
    skewSuffixMap.keySet().each { key ->
        if(skew.contains(key))
            ret = skewSuffixMap[key]
    }

    if(ret == null) {
        logger.warn("Skew " + origSkew + " not found in map, searched for " + skew)
        ret = ""
    }

    return ret
}

def modApk(skew) {

    createRunPluginTask(skew)
    attachScreenshotTasks(skew)

    def connectedTask = getTasks().getByName("connected" + skew + "AndroidTest")
    def packageTask = getTasks().getByName("package" + skew + "AndroidTest")
    def processManifestTask = getTasks().getByName("process" + skew + "AndroidTestManifest")

    def modApkTaskName = packageTask.name + "_modApk"

    def manifestOut = file(processManifestTask.manifestOutputDirectory.file("AndroidManifest.xml").get().toString())

    def switchTargetTaskName = processManifestTask.name + "_switchTarget"

    def switchTargetTask = tasks.create(switchTargetTaskName) {
        doLast {
            def newContents = manifestOut.getText('UTF-8').replaceAll(/android:targetPackage="[^"]+"/, "android:targetPackage=\"com.atakmap.app" + getSkewSuffix(skew) + "\"")
            manifestOut.write(newContents, 'UTF-8')
        }
    }

    def modApkTask = tasks.create(modApkTaskName) {
        doLast {

            def rootTmpDir = new File(packageTask.temporaryDir, "modAPK")
            rootTmpDir.mkdirs()

            packageTask.apkNames.forEach {
                def originalApkPath = null;
                for (int i = 0; i < packageTask.outputs.files.size(); ++i) {
                    String location = packageTask.outputs.files[packageTask.outputs.files.size() - 1];
                    originalApkPath = new File(location, it)
                    if (originalApkPath.exists())
                        break;
                }

                def moddedApkPath = new File(rootTmpDir, it)

                println "creating apk with modded AndroidManifest.xml from:  $originalApkPath"

                exec {
                    commandLine findAAPT(), "p", "-f",
                            "-M", manifestOut.toString(),
                            "-I", findAndroidJar(),
                            "-F", moddedApkPath.toString()
                }

                def apkZipTree = zipTree(originalApkPath.toString())
                def apkZipTreeTmpDir = apkZipTree.getTree().getMirror().getDir()

                println "copying resources from built apk to modded apk"

                (apkZipTree.matching {
                    exclude 'META-INF/**'
                    exclude 'AndroidManifest.xml'
                }).forEach {

                    def relativeName = apkZipTreeTmpDir.toURI().relativize(it.toURI()).toString()

                    exec {
                        workingDir apkZipTreeTmpDir
                        commandLine findAAPT(), "a",
                                moddedApkPath.toString(),
                                relativeName
                    }
                }

                println "overwriting built apk"

                copy {
                    from moddedApkPath
                    into originalApkPath.getParent()
                }

                println "signing apk"

                ant.signjar(
                    jar: originalApkPath,
                    alias: android.signingConfigs.debug.keyAlias,
                    keystore: android.signingConfigs.debug.storeFile,
                    storepass: android.signingConfigs.debug.storePassword,
                    keypass: android.signingConfigs.debug.keyPassword
                )
            }
        }
    }

    processManifestTask.finalizedBy(switchTargetTask)
    modApkTask.dependsOn(packageTask)
    switchTargetTask.dependsOn(processManifestTask)
    connectedTask.dependsOn(modApkTask)
}

def createKillATAKTask(skew) {
    return tasks.create(name: "killATAK" + skew, group: "ATAKKillers", type: Exec) {
        commandLine android.getAdbExe().toString(), "shell", "am", "force-stop", "com.atakmap.app" + getSkewSuffix(skew)
    }
}

def createStartATAKTask(skew) {
    return tasks.create(name: "startATAK" + skew, group: "ATAKStarters", type: Exec) {
        commandLine android.getAdbExe().toString(), "shell", "monkey", "-p", "com.atakmap.app" + getSkewSuffix(skew), "-c", "android.intent.category.LAUNCHER", "1"
    }
}

def createRunPluginTask(skew) {

    def installTask = tasks.findByName("install" + skew)

    def pluginRunTask = tasks.create(name: "runPlugin" + skew, group: "running")

    def killATAK = createKillATAKTask(skew)
    def startATAK = createStartATAKTask(skew)

    pluginRunTask.dependsOn(killATAK)
    pluginRunTask.dependsOn(installTask)
    pluginRunTask.dependsOn(startATAK)

    startATAK.mustRunAfter(installTask)
    installTask.mustRunAfter(killATAK)
}

def reportsDirectory = "$buildDir/reports/androidTests/connected"

task clearScreenshots(type: Exec) {
    executable android.getAdbExe()
    args 'shell', 'rm', '-fr', '/sdcard/screenshots'
}

task createScreenshotDirectory(type: Exec, group: 'reporting') {
    executable android.getAdbExe()
    args 'shell', 'mkdir', '-p', '/sdcard/screenshots'
}

task fetchScreenshots(type: Exec, group: 'reporting') {
    dependsOn {
        createScreenshotDirectory
    }

    doFirst {
        new File(reportsDirectory).mkdirs()
    }

    executable "${android.getAdbExe().toString()}"
    args 'pull', '/sdcard/screenshots', reportsDirectory
}

task embedScreenshots(group: 'reporting') {
    dependsOn {
        fetchScreenshots
    }
    doFirst {
        def failureScreenshotsDirectory = new File(reportsDirectory, 'screenshots/failures')

        if (!failureScreenshotsDirectory.exists()) {
            println 'Could not find failure screenshots. Skipping...'
            return
        }

        failureScreenshotsDirectory.eachFile { failedTestClassDirectory ->
            def failedTestClassName = failedTestClassDirectory.name

            failedTestClassDirectory.eachFile { failedTestFile ->
                def failedTestName = failedTestFile.name
                def failedTestNameWithoutExtension = failedTestName.take(failedTestName.lastIndexOf('.'))
                def failedTestClassJunitReportFile = new File(reportsDirectory, "${failedTestClassName}.html")

                if (!failedTestClassJunitReportFile.exists()) {
                    println "Could not find JUnit report file for test class '${failedTestClassJunitReportFile}'"
                    return
                }

                def failedTestJunitReportContent = failedTestClassJunitReportFile.text

                def patternToFind = "<h3 class=\"failures\">${failedTestNameWithoutExtension}</h3>"
                def imagePath = "screenshots/failures/${failedTestClassName}/${failedTestName}"
                def patternToReplace = "${patternToFind} <a href=\"${imagePath}\"><img src=\"${imagePath}\" width =\"700\" /></a><br/><br/>"

                failedTestJunitReportContent = failedTestJunitReportContent.replaceAll(patternToFind, patternToReplace)

                failedTestClassJunitReportFile.write(failedTestJunitReportContent)
            }
        }
    }
}

def getSkewList() {
    def skewList = []

    getTasks().each { t ->
        if(t.name.startsWith("connected") && t.name.endsWith("AndroidTest")) {
            def skew = t.name.substring("connected".length(), t.name.length() - "AndroidTest".length())
            if(skew.length() > 0)
                skewList.add(skew)
        }
    }

    return skewList
}

def attachScreenshotTasks(skew) {
    def connectedTask = getTasks().getByName("connected" + skew + "AndroidTest")

    connectedTask.dependsOn(clearScreenshots)
    connectedTask.finalizedBy(embedScreenshots)
}

def modAllSkews() {

    getSkewList().each { skew ->
        //println "modding skew: " + skew
        //println "skew ext: " + getSkewSuffix(skew)
        modApk(skew)
    }

}

ext {
    modAllSkews = this.&modAllSkews
}
