////////////////////////////////////////////////////////////////////////////////
//
// PLUGIN_VERSION is the common version name when describing the plugin.
// ATAK_VERSION   is for the version of ATAK this plugin should be compatible
//                with some examples include 3.11.0, 3.11.0.civ 3.11.1.fvey
//
////////////////////////////////////////////////////////////////////////////////

def PLUGIN_VERSION = "1.0"
def ATAK_VERSION = "4.0.0"


buildscript {
    repositories {
        jcenter()
        google()
        mavenCentral()
        maven {
            url "https://jitpack.io"
        }

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.3'
    }
}

allprojects {
    repositories {
        google() 
        mavenCentral()
        maven {
            url "https://jitpack.io"
        }
        jcenter()

    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'


dependencies {

    if (new File("$project.projectDir/../../../ATAK/app/build/libs/main.jar").exists()) {
        println("using the autobuilder version of main.jar")
        compileOnly fileTree(dir: '../../../ATAK/app/build/libs', include: '*.jar')
    } else if (new File("$project.projectDir/../../../main.jar").exists()) {
        println("using the sdk version of main.jar")
        compileOnly fileTree(dir: '../../..', include: '*.jar')
    } else if (new File("sdk/main.jar").exists()) {
        println("using the local version of main.jar")
        compileOnly fileTree(dir: '../sdk/main.jar', include: '*.jar')
    } else if (project.rootProject.file("local.properties").exists()) {
        def props = new Properties()
        props.load(project.rootProject.file("local.properties").newDataInputStream())
        def sdkdir = props.getProperty("sdk.path").toString()
        if (sdkdir == null) {
            println("error reading sdk.path from the local.properties file, this should point to the main.jar file")
        }
        if (new File(sdkdir).exists()) {
           println("using the local version of ${sdkdir}")
           compileOnly fileTree(dir: "${sdkdir}", include: '*.jar')
        }
    } else {
        println("WARNING: could not find the sdk")
    }


    implementation fileTree(dir: 'libs', include: '*.jar')

implementation 'com.android.support:support-v4:21.0.3'
implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
}

// Attempt to get a suitable version name for the plugin based on
// either a git or svn repository
def getVersionName() { 
    try {
            def stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'rev-parse', '--short=8', 'HEAD'
                standardOutput = stdout
            }
            def describe = stdout.toString().trim()
            println("versionName[git]: $describe")
            return describe
    } catch (Exception ignored) {
       println("error occured, using revision of 1")
       return 1
    }
}


// Attempt to get a suitable version code for the plugin based on
// either a git or svn repository
def getVersionCode() {
    try {
        new ByteArrayOutputStream().withStream { os ->
                def result = exec {
                    executable = 'git'
                    args = ['show', '-s', '--format=%ct']
                    standardOutput = os
                    ignoreExitValue = true
                }
            
            def outputAsString = os.toString()
                ext.revision = "$outputAsString".toInteger()

                 println("version[git]: $revision")
        }
    } catch (Exception ignored) {
       println("error occured, using revision of 1")
       ext.revision = 1
    }

    return revision
}





android {
    compileSdkVersion 21
    buildToolsVersion "29.0.2"

   dexOptions {
        jumboMode = true
    }

    lintOptions {
          checkReleaseBuilds true
          // Or, if you prefer, you can continue to check for errors in release builds,
          // but continue the build even when errors are found:
          abortOnError true
      }


    signingConfigs {
        debug {
            if (new File("sdk/android_keystore").exists()) {
                storeFile file("../sdk/android_keystore")
            } else {
                storeFile file("../../../android_keystore/debug.keystore")
            }
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }

        release {
            if (new File("sdk/android_keystore").exists()) {
                storeFile file("../sdk/android_keystore")
            } else { 
                storeFile file("../../../android_keystore")
            }
            storePassword "tnttnt"
            keyAlias "wintec_mapping"
            keyPassword "tnttnt"
        }
    }


    buildTypes {
        debug {
            debuggable true
        }

        release {
            def f = new File("$project.projectDir/../../../ATAK/app/build/outputs/mapping/release/mapping.txt")
            if (f.exists()) {
                System.setProperty("atak.proguard.mapping", "../../../ATAK/app/build/outputs/mapping/release/mapping.txt")
            } else {
                println("WARNING: no mapping file exists, obfuscating just the plugin to work with the development core")
                file("$project.projectDir/build").mkdir()
                file("$project.projectDir/build/blank-mapping.txt").text =""
                System.setProperty("atak.proguard.mapping", "./build/blank-mapping.txt")
            }

            minifyEnabled true
            proguardFile 'proguard-gradle.txt'
            signingConfig signingConfigs.release
        }
    }
    packagingOptions {
        exclude 'META-INF/INDEX.LIST'
    }

    sourceSets {
        main {
            setProperty("archivesBaseName", "ATAK-Plugin-" + rootProject.name + "-" + PLUGIN_VERSION + "-" + getVersionName() + "-" + ATAK_VERSION)
            defaultConfig.versionCode = getVersionCode()
            defaultConfig.versionName = PLUGIN_VERSION + " (" + getVersionName() + ") - [" + ATAK_VERSION + "]"
        }

        // Move the tests to tests/java, tests/res, etc...
        //instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')

    }

    defaultConfig {
        minSdkVersion 21
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86"
        }
    }

    flavorDimensions "application"

    productFlavors {
        mil {

            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".MIL"]
        }
        civ {
            getIsDefault().set(true)
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".CIV"]
        }
        fvey {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".FVEY"]
        }
        aus {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".AUS"]
        }
        nzl {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".NZL"]
        }
        prt {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".PRT"]
        }
        gbr {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".GBR"]
        }
        can {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".CAN"]
        }
        intl {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".INTL"]
        }

    }

    if(file("$project.projectDir/../espresso/testSetup.gradle").exists()) {
         apply from: '../espresso/testSetup.gradle'
    } else {
         println("espresso test harness not found")
    }


}
